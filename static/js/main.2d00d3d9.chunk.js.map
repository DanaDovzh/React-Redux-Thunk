{"version":3,"sources":["store/reducer/reducerTweets.js","store/reducer/reducerUser.js","store/store.js","components/AddUsers/FormAddUser.js","store/action/actionUser.js","components/AddTweet/FormAddTweet.js","components/Nav/Nav.js","components/Users/UsersPage.js","components/Tweets/TweetsPage.js","store/action/actionTweets.js","components/Nav/AppRouters.js","App.js","reportWebVitals.js","index.js"],"names":["actionsType","initialState","tweets","data","users","reducers","combineReducers","rootReducerTweets","state","action","type","payload","rootReducerUser","store","createStore","compose","applyMiddleware","thunk","FormAddUser","useState","name","setName","avatar","setImageContent","username","setUsername","isLink","setIsLink","result","setResult","addUserSubmit","event","a","preventDefault","newUser","resetFormFields","fetch","method","headers","body","JSON","stringify","response","json","success","className","Form","onSubmit","Group","Control","required","onChange","e","target","value","placeholder","defaultValue","Text","minlength","isLinkCheck","match","Button","getUsers","dispatch","FormAddTweet","usersAll","useSelector","useDispatch","content","setContent","image","setImage","userId","setUserId","Set","map","user","id","newPost","useEffect","as","selectedIndex","console","log","disabled","userName","NavPage","to","activeClassName","UsersPage","reverse","Card","Img","variant","src","alt","Body","Title","TweetsPage","tweet","Header","Container","Row","Col","Image","rounded","fluid","AppRouters","App","Nav","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d00d3d9.chunk.js","sourcesContent":["export const actionsType = {\n  getTweets: 'GET_TWEETS',\n}\n\nconst initialState = {\n  tweets: {\n    data: [],\n  }\n};\n\nexport function rootReducerTweets(state = initialState, action) {\n  switch (action.type) {\n    case actionsType.getTweets:\n      return {\n        ...state,\n        tweets: action.payload,\n      };\n    default:\n      return state;\n  }\n}","const initialState = {\n  users: {\n    data: [],\n  }\n};\n\nexport const actionsType = {\n  getUsers: 'GET_USER',\n};\n\nexport function rootReducerUser(state = initialState, action) {\n  switch (action.type) {\n    case actionsType.getUsers: {\n      return {\n        ...state, users: action.payload\n      }\n    };\n    default: {\n      return state;\n    }\n  }\n}","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducerTweets } from './reducer/reducerTweets';\nimport { rootReducerUser } from './reducer/reducerUser';\n\nconst reducers = combineReducers({\n  rootReducerTweets,\n  rootReducerUser,\n});\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nexport default store;","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nimport './add-form-user.sass';\n\nfunction FormAddUser() {\n\tconst [name, setName] = useState('');\n\tconst [avatar, setImageContent] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst [isLink, setIsLink] = useState(false);\n\tconst [result, setResult] = useState(true);\n\n\tconst addUserSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\tif (isLink) {\n\t\t\tconst newUser = {\n\t\t\t\tname,\n\t\t\t\tusername,\n\t\t\t\tavatar,\n\t\t\t};\n\t\t\tresetFormFields();\n\t\t\tconst response = await fetch('http://domer.tech:9999/users', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(newUser),\n\t\t\t});\n\t\t\tconst result = await response.json();\n\t\t\tsetResult(result.success);\n\t\t}\n\t};\n\tconst resetFormFields = () => {\n\t\tsetName('');\n\t\tsetImageContent('');\n\t\tsetUsername('');\n\t};\n\n\tconst checkLink = (e) => {\n\t\tconst linkCheck = /(https?:\\/\\/.*\\.(?:png|jpg|jpeg|gif|svg))/;\n\t\tconst isLinkCheck = e.target.value.match(linkCheck) ? true : false;\n\t\tsetIsLink(isLinkCheck);\n\t\tif (isLinkCheck) {\n\t\t\tsetImageContent(e.target.value);\n\t\t}\n\t};\n\tconst handlerName = (e) => setName(e.target.value);\n\tconst handlerNickname = (e) => setUsername(e.target.value);\n\treturn (\n\t\t<div className='add-form__user form'>\n\t\t\t<Form className='form_add' onSubmit={addUserSubmit}>\n\t\t\t\t<Form.Group>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\trequired\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tonChange={handlerName}\n\t\t\t\t\t\tplaceholder=\"Enter user's name\"\n\t\t\t\t\t\tdefaultValue={name}\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\tName for new user\n\t\t\t\t\t</Form.Text>\n\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tminlength='2'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tonChange={handlerNickname}\n\t\t\t\t\t\tplaceholder=\"Enter user's nickname\"\n\t\t\t\t\t\tdefaultValue='@'\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\tName for new nickname\n\t\t\t\t\t</Form.Text>\n\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\trequired\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='Link for avatar'\n\t\t\t\t\t\tonChange={checkLink}\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\t<span>Put link for avatar</span>\n\t\t\t\t\t\t{!isLink && <span className='error'>Wrong link</span>}\n\t\t\t\t\t</Form.Text>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Button className='form_add__btn' type='submit'>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t\t{!result && <p className='error'>Something went wrong</p>}\n\t\t</div>\n\t);\n}\n\nexport default FormAddUser;\n","import { actionsType } from '../reducer/reducerUser';\n\nexport function getUsers() {\n\treturn async (dispatch) => {\n\t\tconst response = await fetch('http://domer.tech:9999/users/');\n\t\tconst json = await response.json();\n\t\tdispatch({\n\t\t\ttype: actionsType.getUsers,\n\t\t\tpayload: json,\n\t\t});\n\t};\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getUsers } from '../../store/action/actionUser';\n\nimport './add-tweet.sass';\n\nfunction FormAddTweet() {\n\tconst usersAll = useSelector((state) => state.rootReducerUser.users.data);\n\tconst dispatch = useDispatch();\n\tconst [name, setName] = useState('');\n\tconst [content, setContent] = useState('');\n\tconst [image, setImage] = useState('');\n\tconst [userId, setUserId] = useState('');\n\tconst [isLink, setIsLink] = useState(false);\n\tconst [result, setResult] = useState(true);\n\tconst users = [...new Set(usersAll.map((user) => [user.name, user.id]))];\n\n\tconst handlerAuthor = (e) => {\n\t\tsetName(e.target.value);\n\t\tsetUserId(e.target.selectedIndex);\n\t\tconsole.log(e.target.selectedIndex);\n\t};\n\tconst handlerContent = (e) => setContent(e.target.value);\n\tconst resetFormFields = () => {\n\t\tsetName('');\n\t\tsetContent('');\n\t\tsetImage('');\n\t};\n\tconst onSubmit = async (e) => {\n\t\te.preventDefault();\n\t\tif (isLink) {\n\t\t\tconst newPost = {\n\t\t\t\tname,\n\t\t\t\tcontent,\n\t\t\t\timage,\n\t\t\t\tuserId,\n\t\t\t};\n\t\t\tconst response = await fetch('http://domer.tech:9999/tweets', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(newPost),\n\t\t\t});\n\t\t\tconst result = await response.json();\n\t\t\tsetResult(result.success);\n\t\t\tresetFormFields();\n\t\t}\n\t};\n\n\tconst checkLink = (e) => {\n\t\tconst linkCheck = /(https?:\\/\\/.*\\.(?:png|jpg|jpeg|gif|svg))/;\n\t\tconst isLinkCheck = e.target.value.match(linkCheck) ? true : false;\n\t\tsetIsLink(isLinkCheck);\n\t\tif (isLinkCheck) {\n\t\t\tsetImage(e.target.value);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdispatch(getUsers());\n\t}, []);\n\n\treturn (\n\t\t<div className='form__add-tweet form'>\n\t\t\t<Form className='form_add' onSubmit={onSubmit}>\n\t\t\t\t<Form.Group>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tminlength='2'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tonChange={handlerContent}\n\t\t\t\t\t\tplaceholder='What do you want to say?'\n\t\t\t\t\t\tdefaultValue={content}\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Text className='text-muted'>Your opinion</Form.Text>\n\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\tas='select'\n\t\t\t\t\t\tid='select'\n\t\t\t\t\t\tonChange={handlerAuthor}\n\t\t\t\t\t\tdefaultValue='Choose author'>\n\t\t\t\t\t\t<option disabled>Choose author</option>\n\t\t\t\t\t\t{users.map((userName) => (\n\t\t\t\t\t\t\t<option id={userName[1]} value={userName[0]}>\n\t\t\t\t\t\t\t\t{userName[0]}{' '}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Form.Control>\n\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\tSelect the author\n\t\t\t\t\t</Form.Text>\n\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\trequired\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='Link for avatar'\n\t\t\t\t\t\tdefaultValue={image}\n\t\t\t\t\t\tonChange={checkLink}\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\t<span>Put link for content</span>\n\t\t\t\t\t\t{!isLink && <span className='error'>Wrong link</span>}\n\t\t\t\t\t</Form.Text>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Button className='form_add__btn' type='submit'>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t\t{!result && <p className='error'>Something went wrong</p>}\n\t\t</div>\n\t);\n}\n\nexport default FormAddTweet;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './nav-page.sass';\n\nconst NavPage = () => {\n\treturn (\n\t\t<div className='nav-pages'>\n\t\t\t<NavLink\n\t\t\t\tto='/users-page'\n\t\t\t\tclassName='nav-link'\n\t\t\t\tactiveClassName='active'>\n\t\t\t\tUsers\n\t\t\t</NavLink>\n\t\t\t<NavLink\n\t\t\t\tto='/add-user'\n\t\t\t\tclassName='nav-link'\n\t\t\t\tactiveClassName='active'>\n\t\t\t\tAdd user\n\t\t\t</NavLink>\n\t\t\t<NavLink\n\t\t\t\tto='/tweets-page'\n\t\t\t\tclassName='nav-link'\n\t\t\t\tactiveClassName='active'>\n\t\t\t\tTweets\n\t\t\t</NavLink>\n\t\t\t<NavLink\n\t\t\t\tto='/tweet-user'\n\t\t\t\tclassName='nav-link'\n\t\t\t\tactiveClassName='active'>\n\t\t\t\tAdd tweet\n\t\t\t</NavLink>\n\t\t</div>\n\t);\n};\n\nexport default NavPage;\n","import React, { useEffect } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getUsers } from '../../store/action/actionUser';\n\nimport './users-page.sass';\n\nconst UsersPage = () => {\n\tconst dispatch = useDispatch();\n\tconst users = useSelector((state) => state.rootReducerUser.users.data);\n\n\tuseEffect(() => {\n\t\tdispatch(getUsers());\n\t}, []);\n\treturn (\n\t\t<div className='users-page'>\n\t\t\t{users.reverse().map((user) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card className='card-user'>\n\t\t\t\t\t\t<Card.Img\n\t\t\t\t\t\t\tvariant='top'\n\t\t\t\t\t\t\tsrc={user.avatar}\n\t\t\t\t\t\t\talt={user.avatar}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<Card.Title>{user.name}</Card.Title>\n\t\t\t\t\t\t\t<Card.Text className='username'>\n\t\t\t\t\t\t\t\tnickname: {user.username}\n\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default UsersPage;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Container, Row, Col, Image } from 'react-bootstrap';\n\nimport { getTweets } from '../../store/action/actionTweets';\nimport { getUsers } from '../../store/action/actionUser';\n\nimport './tweet-page.sass';\n\nfunction TweetsPage() {\n\tconst dispatch = useDispatch();\n\tconst tweets = useSelector((state) => state.rootReducerTweets.tweets.data);\n\tconst usersAll = useSelector((state) => state.rootReducerUser.users.data);\n\n\tuseEffect(() => {\n\t\tdispatch(getTweets());\n\t\tdispatch(getUsers());\n\t}, []);\n\tconsole.log(tweets);\n\treturn (\n\t\t<div className='tweets'>\n\t\t\t{tweets.map((tweet) => {\n\t\t\t\treturn usersAll.map((user) => {\n\t\t\t\t\tif (user.id === tweet.userId)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Card className='card-tweet'>\n\t\t\t\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={user.avatar}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trounded\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='card-tweet__avatar'\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<Col className='name'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<Col className='username'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t<Card.Text className='card-tweet__content'>\n\t\t\t\t\t\t\t\t\t\t\t{tweet.content}\n\t\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\t\t\tsrc={tweet.image}\n\t\t\t\t\t\t\t\t\t\t\tclassName='card-tweet__img-content'\n\t\t\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t})}\n\t\t</div>\n\t);\n}\n\nexport default TweetsPage;\n","import { actionsType } from '../reducer/reducerTweets';\n\nexport function getTweets() {\n    return async (dispatch) => {\n        const response = await fetch('http://domer.tech:9999/tweets/');\n        const json = await response.json();\n        dispatch({\n            type: actionsType.getTweets,\n            payload: json,\n        });\n    };\n}\n","export const AppRouters = {\n\tuserPage: '/users-page',\n\taddUser: '/add-user',\n\ttweetsPage: '/tweets-page',\n\ttweetUser: '/tweet-user',\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport FormAddUser from './components/AddUsers/FormAddUser';\nimport FormAddTweet from './components/AddTweet/FormAddTweet';\nimport NavPage from './components/Nav/Nav';\nimport UsersPage from './components/Users/UsersPage';\nimport TweetsPage from './components/Tweets/TweetsPage';\nimport { AppRouters } from './components/Nav/AppRouters';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<NavPage />\n\t\t\t<Switch>\n\t\t\t\t<Route path={AppRouters.userPage} component={UsersPage} />\n\t\t\t\t<Route path={AppRouters.addUser} component={FormAddUser} />\n\t\t\t\t<Route path={AppRouters.tweetsPage} component={TweetsPage} />\n\t\t\t\t<Route path={AppRouters.tweetUser} component={FormAddTweet} />\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}